1. Merge Conflict in Local 
2. Merge Conflict in GitHub
git rebase --continue
git pull --rebase origin main
git log
git checkout (1st 8 digit of git log) .


 Jenkins 
1. Job with Hello World or Java Version(Batch Command). New Item > Name >FreeStyle > Add Description Build Steps : Add build Steps > Execute Windows batch command > echo "Hello World" or javac --version Appy and Save Enter Build Now 


2. Same Job build periodically.(Two types : Build periodically, Poll SCM )
 New Item > Name >FreeStyle > Add Description In Build Triggers : 
Select Build periodically and Poll SCM Inside give 5 stars (* * * * * ) 1. * * * * * = Per Minute 2. H/15 * * * * = Per 15 Minutes
 3. H H * * * = Every Per Day
 Build Steps : Add build Steps > Execute Windows batch command > echo "Hello World" or javac --version Appy and Save Enter Build Now


 3. Pipeline: 
● with 3 Jobs (Build, Test, Deploy) using View(+) Install Pulgins: Manage Jenkins > Manage Plugins > Available Pulgins > Search Build Pipeline Plugin Create 3 jobs Build, Test and Deploy.(refer Q.1) Go to Job Build > configure In Post-build action > Select build other project or build other project(manually) > In projects to build > Enter Next Job name (Test). Apply and save Repeat the same for Test. Create Pipeline View. In dashboard select new view (+) In New view : add name > select build Pipeline View>Add name>select initial job>Apply and save 


● With pipeline script with helloworld(Declarative) In dashboard :-new item >enter name>select pipeline>pipeline>script>select hello world from right corner>apply and save and build project 


● Pipeline script with svm(Declarative) In dashboard :-new item >enter name>add poll svm or build periodically >select pipeline>pipeline>script>pipeline script from svm >in svm select git > paste repository from git with a jenkinfile >credential add email and password of app or gitpassword try >branches select main or master >script :jenkinfile refer from github >apply and save .


 ● Pipeline script with svm webhook In dashboard :-new item >enter name >select pipeline>pipeline>script>pipeline script from svm >in svm select git > paste repository from git with a jenkinfile >credential add email and password of app or git password try >branches select main or master >script :jenkinfile refer from github >apply and save . Go to git hub :go to repo with jenkinfile>settings >webhook>add webhook>payload url from ngrok:commands 1)ngrok.exe http 8080 Paste the link after /github-webhook/ >select send me everything >select activate>add webhook . Relode the git hub after making changes to a file >go to jenkins and reload it will build automatically .




 4. Email:
 ● E-mail Notification Go to dashboard >manage jenkins >configure system>go buttom >email Notification>smtpserver:-smtp.gmail.com>select use smtp authentication:user name: email password:app generated >use ssl tick >smtp port:465>reply to address: email >charset :utf-8>test configuration by sending test e-mail add email and test configuration the message will be sent to your email. 
● Extended E-mail Notification Go to dashboard >manage jenkins >configure system>go buttom>Extended-EmailNotification>smtpserver:-smtp.gmail.com >smtp port:465>default content type:html(text/html)>default triggers:select :-always Create a job >freestyle>got to buttom post-build action :-select Editable Email Notification >project from :any name>project recipient :-(email id ) project-reply-to-list :-(email id)> content type (html/text) apply and save build a job it will get notification to your mail 


● Extended E-mail Notification with Pipeline.(Two types : with Pipeline script , Pipeline script with svm) Go to dashboard>new item >pipeline >select build periodically>pipeline select :-pipeline script trysamplepipline select hello world paste the program:-

pipeline {
agent any
stages {
stage('apna') {
steps {
echo 'Hello World'
}
}
stage('pipeline') {
steps {
echo 'Hello World'
}
}
stage('ajay') {
steps {
echo 'Hello World'
}
}
}
post
{
always
{
emailext body: 'ajaypipeline', subject: 'apnapipeline', to:
'hritikhotagiofficial@gmail.com'
}
}
}


Apply and save and build the project Go to dashboard>new item >pipeline >select build periodically>pipeline select>pipeline script from SCM>Add scm :-git >repositiory >repository url:-git email >credential add git hub user name :- email password :-git or app generated>discription :-add anything >scriptpath :jenkinfile or see the git hub file name apply save and build 


. 5. Role Based Authorization
 6. Maven
 
 mvn archetype:generate -DgroupId=com.MSRIT.app -DartifactId=navya -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false



cd navya

mvn package

java -cp target/navya-1.0-SNAPSHOT.jar com.MSRIT.app.App



installation
1. Visit the Maven download page and download the version of Maven you want to install. The Files section contains the archives of the latest version. Access earlier versions using the archives link in the Previous Releases section.
2. Click on the appropriate link to download the binary zip archive of the latest version of Maven. As of the time of writing this tutorial, that is version 3.8.4.
 


3. Since there is no installation process, extract the Maven archive to a directory of your choice once the download is complete. For this tutorial, we are using C:\Program Files\Maven\apache-maven-3.8.4.


Step 2: Add MAVEN_HOME System Variable
1. Open the Start menu and search for environment variables.
2. Click the Edit the system environment variables result.




3. Under the Advanced tab in the System Properties window, click Environment Variables.
4.Click the New button under the System variables section to add a new system environment variable.
5. Enter MAVEN_HOME as the variable name and the path to the Maven directory as the variable value. Click OK to save the new system variable


Step 3: Add MAVEN_HOME Directory in PATH Variable
1. Select the Path variable under the System variables section in the Environment Variables window. Click the Edit button to edit the variable.
2. Click the New button in the Edit environment variable window.


 3. Enter %MAVEN_HOME%\bin in the new field. Click OK to save changes to the Path variable
Note: Not adding the path to the Maven home directory to the Path variable causes the 'mvn' is not recognized as an internal or external command, operable program or batch file error when using the mvn command.
4. Click OK in the Environment Variables window to save the changes to the system variables.
 
Step 4: Verify Maven Installation
In the command prompt, use the following command to verify the installation by checking the current version of Maven:
mvn -version


mvn package


The command line will print out various actions, and end with the following:
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.953 s
[INFO] Finished at: 2019-11-24T13:05:10+01:00
[INFO] ------------------------------------------------------------------------


You may test the newly compiled and packaged JAR with the following command:
java -cp target/Abhishek-1.0-SNAPSHOT.jar com.MSRIT.app.App


Which will print the quintessential:
Hello World!


---------------------------------------------------------------------------------------------------------------------------------




An interesting thing to note is that phases and goals may be executed in sequence.
mvn clean dependency:copy-dependencies package


This command will clean the project, copy dependencies, and package the project (executing all phases up to package, of course).


Generating the Site
mvn site


This phase generates a site based upon information on the project's pom. You can look at the documentation generated under target/site.


